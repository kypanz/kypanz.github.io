---
layout: post
title:  "[CTF]  Shooting 101 - Cyber Apocalypse 2023"
date:   2023-03-24 20:21:16 -0300
categories: jekyll update
---

Hello, today i gonna show you how i solved the challenge Shooting 101 from Hack the Box hackthon

What we gonna need :
- Remix IDE
- Metamask
- Smart Contracts
- Information about connection


The connection and how interact with remix i gonna skipped, but if you are curious you can start with the first challenge of this link, to see how i prepare all the things : 

- Link to the first challenge "[CTF] Navigating the Unknown" : https://kypanz.github.io/jekyll/update/2023/03/24/Navigating-the-unknown.html


First lets start the docker of the challenge and download the files : 

![image](https://user-images.githubusercontent.com/37570367/227661559-61372e5b-55b4-4c84-bff7-96bab51af22b.png)

Ok lets go to see the smart contracts donloaded, we have two files :
- Setup.sol
- ShootingArea.sol


# Setup.sol
{% highlight ruby %}

pragma solidity ^0.8.18;

import {ShootingArea} from "./ShootingArea.sol";

contract Setup {
    ShootingArea public immutable TARGET;

    constructor() {
        TARGET = new ShootingArea();
    }

    function isSolved() public view returns (bool) {
        return TARGET.firstShot() && TARGET.secondShot() && TARGET.thirdShot();
    }
}

{% endhighlight %}

# ShootingArea.sol
{% highlight ruby %}
pragma solidity ^0.8.18;

contract ShootingArea {
    bool public firstShot;
    bool public secondShot;
    bool public thirdShot;

    modifier firstTarget() {
        require(!firstShot && !secondShot && !thirdShot);
        _;
    }

    modifier secondTarget() {
        require(firstShot && !secondShot && !thirdShot);
        _;
    }

    modifier thirdTarget() {
        require(firstShot && secondShot && !thirdShot);
        _;
    }

    receive() external payable secondTarget {
        secondShot = true;
    }

    fallback() external payable firstTarget {
        firstShot = true;
    }

    function third() public thirdTarget {
        thirdShot = true;
    }
}

{% endhighlight %}

To solve this challenge is so simple, we need to interact with the 3 functions of the Target ( ShootingArea.sol )

- fallback
- receive
- third

Lets explain in the IDE with a draw :

![image](https://user-images.githubusercontent.com/37570367/227663127-200926ed-2552-4ab2-adb8-6222963f52d4.png)


So here are interesting things, because the `fallback` function is gonna be activated only when the functions is called with data and has a value ( eth )
Let me draw it :

Note : if you try to intract with the function without `data` or `value` ( eth sended ), the transaction is gonna be revert

![image](https://user-images.githubusercontent.com/37570367/227663638-0c2f38e8-921d-450c-95ab-239b686fc248.png)


you can do this doing this :
![image](https://user-images.githubusercontent.com/37570367/227663837-20210ff3-866b-461b-8e2a-af9bf6db4dbd.png)

and you get the first shot done

Lets go now for the second shot, the second shot to be activated you need to understand how works the receive function, in this case works like oposite of fallback funtion, this means you need to interact only with value but not with data, let me draw it :
![image](https://user-images.githubusercontent.com/37570367/227664088-bded2c86-7871-41d3-8f05-edefa3bf6543.png)

Ok so lets do that : 
![image](https://user-images.githubusercontent.com/37570367/227664190-ac22bb92-bf4c-4762-9e31-534ba80f03b6.png)


And then the last one, that only need to interact with a normal function : 
![image](https://user-images.githubusercontent.com/37570367/227664390-695976cc-a239-4676-8ce9-949f6a1f04ad.png)

Lets do it : 
![image](https://user-images.githubusercontent.com/37570367/227664444-da04e933-bde8-4ee8-b271-464951f7d6ec.png)

And thats it, now only need to connect with the docker and get the flag : 

![image](https://user-images.githubusercontent.com/37570367/227666072-54765bef-1737-4652-bddb-d42ed80b3aea.png)


Thats it :)


[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
