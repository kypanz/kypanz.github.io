---
layout: post
title:  "[CTF]  Shooting 101 - Cyber Apocalypse 2023"
date:   2023-03-24 20:21:16 -0300
categories: jekyll update
---

Hello, today i gonna show you how i solved the challenge Shooting 101 from Hack the Box hackthon

What we gonna need :
- Remix IDE
- Metamask
- Smart Contracts
- Information about connection


The connection and how interact with remix i gonna skipped, but if you are curious you can start with the first challenge of this link, to see how i prepare all the things : 

- Link to the first challenge "[CTF] Navigating the Unknown" : https://kypanz.github.io/jekyll/update/2023/03/24/Navigating-the-unknown.html


First lets start the docker of the challenge and download the files : 

![image](https://user-images.githubusercontent.com/37570367/227661559-61372e5b-55b4-4c84-bff7-96bab51af22b.png)

Ok lets go to see the smart contracts donloaded, we have two files :
- Setup.sol
- ShootingArea.sol


# Setup.sol
{% highlight ruby %}

pragma solidity ^0.8.18;

import {ShootingArea} from "./ShootingArea.sol";

contract Setup {
    ShootingArea public immutable TARGET;

    constructor() {
        TARGET = new ShootingArea();
    }

    function isSolved() public view returns (bool) {
        return TARGET.firstShot() && TARGET.secondShot() && TARGET.thirdShot();
    }
}

{% endhighlight %}

# ShootingArea.sol
{% highlight ruby %}
pragma solidity ^0.8.18;

contract ShootingArea {
    bool public firstShot;
    bool public secondShot;
    bool public thirdShot;

    modifier firstTarget() {
        require(!firstShot && !secondShot && !thirdShot);
        _;
    }

    modifier secondTarget() {
        require(firstShot && !secondShot && !thirdShot);
        _;
    }

    modifier thirdTarget() {
        require(firstShot && secondShot && !thirdShot);
        _;
    }

    receive() external payable secondTarget {
        secondShot = true;
    }

    fallback() external payable firstTarget {
        firstShot = true;
    }

    function third() public thirdTarget {
        thirdShot = true;
    }
}

{% endhighlight %}

To solve this challenge is so simple, we need to interact with the 3 functions of the Target ( ShootingArea.sol )

- fallback
- receive
- third

Lets explain in the IDE with a draw :



[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
